// Copyright Supranational LLC
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0

use blst::*;

// Benchmark min_pk
use blst::min_pk::*;

use criterion::{criterion_group, criterion_main, BenchmarkId, Criterion};
use rand::{RngCore, SeedableRng};
use rand_chacha::ChaCha20Rng;

struct BenchData {
    sk: SecretKey,
    pk: PublicKey,
    msg: Vec<u8>,
    dst: Vec<u8>,
    sig: Signature,
}

fn gen_bench_data(rng: &mut rand_chacha::ChaCha20Rng) -> BenchData {
    let msg_len = (rng.next_u64() & 0x3F) + 1;
    let mut msg = vec![0u8; msg_len as usize];
    rng.fill_bytes(&mut msg);

    gen_bench_data_for_msg(rng, &msg)
}

fn gen_bench_data_for_msg(
    rng: &mut rand_chacha::ChaCha20Rng,
    msg: &Vec<u8>,
) -> BenchData {
    let mut ikm = [0u8; 32];
    rng.fill_bytes(&mut ikm);

    let sk = SecretKey::key_gen(&ikm, &[]).unwrap();
    let pk = sk.sk_to_pk();
    let dst = "BLS_SIG_BLS12381G2_XMD:SHA-256_SSWU_RO_NUL_"
        .as_bytes()
        .to_owned();

    let sig = sk.sign(&msg, &dst, &[]);

    let bd = BenchData {
        sk,
        pk,
        dst,
        msg: msg.clone(),
        sig,
    };
    bd
}

// fn bench_verify_multi_aggregate(c: &mut Criterion) {
//     let mut group = c.benchmark_group("verify_multi_aggregate");

//     let dst = b"BLS_SIG_BLS12381G2_XMD:SHA-256_SSWU_RO_POP_";
//     let mut ikm = [0u8; 32];

//     let seed = [0u8; 32];
//     let mut rng = ChaCha20Rng::from_seed(seed);

//     let num_sigs = vec![8, 16, 32, 64, 128];
//     let pks_per_sig = 3;

//     for n in num_sigs.iter() {
//         let mut msgs: Vec<Vec<u8>> = vec![vec![]; *n];
//         let mut sigs: Vec<Signature> = Vec::with_capacity(*n);
//         let mut pks: Vec<PublicKey> = Vec::with_capacity(*n);
//         let mut rands: Vec<blst_scalar> = Vec::with_capacity(*n);

//         for i in 0..*n {
//             // Create public keys
//             rng.fill_bytes(&mut ikm);
//             let sks_i: Vec<_> = (0..pks_per_sig)
//                 .map(|_| {
//                     ikm[0] += 1;
//                     SecretKey::key_gen(&ikm, &[]).unwrap()
//                 })
//                 .collect();
//             let pks_i =
//                 sks_i.iter().map(|sk| sk.sk_to_pk()).collect::<Vec<_>>();
//             let pks_refs_i: Vec<&PublicKey> =
//                 pks_i.iter().map(|pk| pk).collect();

//             // Create random message for pks to all sign
//             let msg_len = (rng.next_u64() & 0x3F) + 1;
//             msgs[i] = vec![0u8; msg_len as usize];
//             rng.fill_bytes(&mut msgs[i]);

//             // Generate signature for each key pair
//             let sigs_i = sks_i
//                 .iter()
//                 .map(|sk| sk.sign(&msgs[i], dst, &[]))
//                 .collect::<Vec<Signature>>();

//             // Aggregate signature
//             let sig_refs_i =
//                 sigs_i.iter().map(|s| s).collect::<Vec<&Signature>>();
//             let agg_i = match AggregateSignature::aggregate(&sig_refs_i, false)
//             {
//                 Ok(agg_i) => agg_i,
//                 Err(err) => panic!("aggregate failure: {:?}", err),
//             };
//             sigs.push(agg_i.to_signature());

//             // aggregate public keys and push into vec
//             let agg_pk_i =
//                 match AggregatePublicKey::aggregate(&pks_refs_i, false) {
//                     Ok(agg_pk_i) => agg_pk_i,
//                     Err(err) => panic!("aggregate failure: {:?}", err),
//                 };
//             pks.push(agg_pk_i.to_public_key());

//             // create random values
//             let mut vals = [0u64; 4];
//             vals[0] = rng.next_u64();
//             let mut rand_i = std::mem::MaybeUninit::<blst_scalar>::uninit();
//             unsafe {
//                 blst_scalar_from_uint64(rand_i.as_mut_ptr(), vals.as_ptr());
//                 rands.push(rand_i.assume_init());
//             }
//         }

//         let msgs_refs: Vec<&[u8]> = msgs.iter().map(|m| m.as_slice()).collect();
//         let sig_refs = sigs.iter().map(|s| s).collect::<Vec<&Signature>>();
//         let pks_refs: Vec<&PublicKey> = pks.iter().map(|pk| pk).collect();

//         let agg_ver = (sig_refs, pks_refs, msgs_refs, dst, rands);

//         group.bench_with_input(
//             BenchmarkId::new("verify_multi_aggregate", n),
//             &agg_ver,
//             |b, (s, p, m, d, r)| {
//                 b.iter(|| {
//                     let result =
//                         Signature::verify_multiple_aggregate_signatures(
//                             &m, *d, &p, false, &s, false, &r, 64,
//                         );
//                     assert_eq!(result, BLST_ERROR::BLST_SUCCESS);
//                 });
//             },
//         );
//     }

//     group.finish();
// }

fn bench_fast_aggregate_verify(c: &mut Criterion) {
    let mut group = c.benchmark_group("fast_aggregate_verify");

    let seed = [0u8; 32];
    let mut rng = ChaCha20Rng::from_seed(seed);

    let msg_len = (rng.next_u64() & 0x3F) + 1;
    let mut msg = vec![0u8; msg_len as usize];
    rng.fill_bytes(&mut msg);

    let sizes = vec![8, 16, 32, 64, 128];

    let bds: Vec<_> = (0..sizes[sizes.len() - 1])
        .map(|_| gen_bench_data_for_msg(&mut rng, &msg))
        .collect();

    for size in sizes.iter() {
        let pks_refs = bds
            .iter()
            .take(*size)
            .map(|s| &s.pk)
            .collect::<Vec<&PublicKey>>();

        let sig_refs = bds
            .iter()
            .take(*size)
            .map(|s| &s.sig)
            .collect::<Vec<&Signature>>();

        let agg = match AggregateSignature::aggregate(&sig_refs, false) {
            Ok(agg) => agg,
            Err(err) => panic!("aggregate failure: {:?}", err),
        };
        let agg_sig = agg.to_signature();

        let agg_pks = match AggregatePublicKey::aggregate(&pks_refs, false) {
            Ok(agg_pks) => agg_pks,
            Err(err) => panic!("aggregate failure: {:?}", err),
        };
        let agg_pk = agg_pks.to_public_key();

        let agg_ver = (agg_sig, pks_refs, &bds[0].msg, &bds[0].dst);
        let agg_pre_ver = (agg_sig, agg_pk, &bds[0].msg, &bds[0].dst);

        group.bench_with_input(
            BenchmarkId::new("fast_aggregate_verify", size),
            &agg_ver,
            |b, (a, p, m, d)| {
                b.iter(|| {
                    let result = a.fast_aggregate_verify(true, &m, &d, &p);
                    assert_eq!(result, BLST_ERROR::BLST_SUCCESS);
                });
            },
        );

        group.bench_with_input(
            BenchmarkId::new("fast_aggregate_verify_preagg", size),
            &agg_pre_ver,
            |b, (a, p, m, d)| {
                b.iter(|| {
                    let result = a
                        .fast_aggregate_verify_pre_aggregated(true, &m, &d, &p);
                    assert_eq!(result, BLST_ERROR::BLST_SUCCESS);
                });
            },
        );
    }

    group.finish();
}
